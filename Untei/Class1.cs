using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Untei
{
    internal class BibManager
    {
        private Dictionary<string, BibItem> BibDictionary;

        public BibManager()
        {
            string fileName = "library.json";
            JsonString = File.ReadAllText(fileName);
            Console.WriteLine(JsonString);

            BibDictionary= JsonSerializer.Deserialize<Dictionary<string, BibItem>>(JsonString);
            JsonString = BibDictionary["Lee2015a"].Abstract;
        }

        /// <summary>
        /// Json string of the bibliography data
        /// </summary>
        public string JsonString { get; private set; }

        /// <summary>
        /// Get a list of keys.
        /// </summary>
        /// <returns>List of keys</returns>
        public List<string> GetKeys()
        {
            return BibDictionary.Keys.ToList();
        }

        /// <summary>
        /// Get a summary data of a bibliography item.
        /// </summary>
        /// <param name="key">Citation key</param>
        /// <returns>List of the author, title, and publication year of the given `key`</returns>
        public List<string> GetBibSummary(string key)
        {
            List<string> list = new()
            {
                BibDictionary[key].Author,
                BibDictionary[key].Title,
                BibDictionary[key].Year
            };

            return list;
        }
    }

    internal class BibItem
    {
        public BibItem()
        {
            Id = "";
            EntryType = "";
            Title = "";
            Author = "";
            Year = "";
            Month = "";
            Doi = "";
            Journal = "";
            Abstract = "";
            Arxivid = "";
            Tags = "";
            Comment = "";
            Keywords = "";
            File = "";
            Eprint = "";
            Archiveprefix = "";
        }

        public string Id { get; set; }
        public string EntryType { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public string Year { get; set; }
        public string Month { get; set; }
        public string Doi { get; set; }
        public string Journal { get; set; }
        public string Abstract { get; set; }
        public string Arxivid { get; set; }
        public string Url { get; set; }
        public string Tags { get; set; }
        public string Comment { get; set; }
        public string Keywords { get; set; }
        public string File { get; set; }
        public string Eprint { get; set; }
        public string Archiveprefix { get; set; }

        /*
        "year": "2018",
        "url": "http://arxiv.org/abs/1803.10122 http://dx.doi.org/10.5281/zenodo.1207631 https://worldmodels.github.io",
        "title": "{World Models}",
        "month": "mar",
        "mendeley-tags": "machine learning,neural network,reinforcement learning",
        "keywords": "machine learning,neural network,reinforcement learning",
        "journal": "arXiv Prepr. arXiv1803.10122",
        "file": ":D$\\backslash$:/Mendeley Desktop//Ha, Schmidhuber - 2018 - World Models.pdf:pdf",
        "eprint": "1803.10122",
        "doi": "10.5281/zenodo.1207631",
        "author": "Ha, David and Schmidhuber, J{\\\"{u}}rgen",
        "arxivid": "1803.10122",
        "archiveprefix": "arXiv",
        "annote": "環境をNN内にモデル化し，そのNN内部表現を用いることでコンパクトかつシンプルな方策を学習した論文。\n\n環境のモデル化が完了したら，方策の訓練は実環境がなくてもNNのみから訓練できる。\n（まるで夢を見るような感じ！）\n\nVAEで環境情報から潜在変数を抽出し，この潜在変数に対する予測モデルを学習する。\n方策は環境情報の生データの代わりに潜在変数と予測モデルの内部表現を入力にする。\n低次元化された環境情報に対する予測モデルは過去と未来に関する良い表現を保持していると期待できるので，この内部表現を使うことで単純な構造でも高度な方策が実現できる。",
        "abstract": "We explore building generative neural network models of popular reinforcement learning environments. Our world model can be trained quickly in an unsupervised manner to learn a compressed spatial and temporal representation of the environment. By using features extracted from the world model as inputs to an agent, we can train a very compact and simple policy that can solve the required task. We can even train our agent entirely inside of its own hallucinated dream generated by its world model, and transfer this policy back into the actual environment. An interactive version of this paper is available at {\\$}\\backslashhref{\\{}https://worldmodels.github.io/{\\}}{\\{}\\backslashmathtt{\\{}https://worldmodels.github.io{\\}}{\\}}{\\$}.",
        "ENTRYTYPE": "article",
        "ID": "Ha2018"
        */
    }
}
